#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('fabricdemo:server');
var http = require('http');
var fs = require('fs');
Promise = require('bluebird');

Configuration = require('../config/basicConfig.json');




startServer();



function startServer() {

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || Configuration.port || '3000');

  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  console.log('app listening on port :' + port);




  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string' ?
      'Pipe ' + port :
      'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
      'pipe ' + addr :
      'port ' + addr.port;
    debug('Listening on ' + bind);
  }


  // this function is called when you want the server to die gracefully
  // i.e. wait for existing connections
  var shutDown = function() {
    console.log('Received kill signal, shutting down gracefully');
    server.close(() => {
      console.log('kill !')
      console.log(new Date());
      process.exit(0);
    });


  };
  // listen for TERM signal .e.g. kill
  process.on('SIGTERM', shutDown);
  // listen for INT signal e.g. Ctrl-C
  process.on('SIGINT', shutDown);
}



